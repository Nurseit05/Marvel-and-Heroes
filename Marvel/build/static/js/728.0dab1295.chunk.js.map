{"version":3,"file":"static/js/728.0dab1295.chunk.js","mappings":"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","sources":["components/randomChar/RandomChar.js","components/errorBoundary/ErrorBoundary.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/pages/MainPage.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        // const timerId = setInterval(updateChar, 30000);\n\n        // return () => {\n        //     clearInterval(timerId)\n        // }\n    }, [])\n\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error,errorInfo)\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        if(this.state.error) {\n            return <ErrorMessage/>\n        }\n\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundary;","import {useState, useEffect, useRef} from 'react';\nimport PropTypes from 'prop-types';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    \n    const {loading, error, getAllCharacters } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(false);\n        setOffset(offset => offset + 9);\n        setCharEnded(ended)\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <li \n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    \n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n    const updateChar = () => {\n        clearError();\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton/>;\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }                \n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { useState } from \"react\"\nimport RandomChar from \"../randomChar/RandomChar\"\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\"\nimport CharList from \"../charList/CharList\"\nimport CharInfo from \"../charInfo/CharInfo\"\n\n\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n\n    const [selectedChar, setSelectedChar] = useState(null)\n\n    const onCharSelected = (id) => {\n        setSelectedChar(id);\n    } \n\n    return (\n        <>\n            <RandomChar/>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected}/>\n                </ErrorBoundary>\n                <CharInfo charId={selectedChar}/>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>    \n        </>\n    )\n}\n\nexport default MainPage;"],"names":["View","_ref","char","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","_jsx","src","alt","style","href","_useState","useState","_useState2","_slicedToArray","setChar","_useMarvelService","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","_createClass","key","value","errorInfo","console","log","this","setState","props","Component","charList","setCharList","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","renderItems","disabled","_Fragment","comics","charId","skeleton","Skeleton","selectedChar","setSelectedChar","RandomChar","CharList","CharInfo","decoration"],"sourceRoot":""}